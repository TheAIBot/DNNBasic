#include <CppUnitTest.h>
#include <string>
#include <vector>
#include "tensor.h"
#include "test_tools.h"

namespace DNNBasicTest
{
	TEST_CLASS(tensorMultiDimMatMulTestsAutoGenerated)
	{
		template<typename T>
		std::vector<T> GetVectorWithRandomNumbers(const uint32_t size)
		{
			std::vector<T> numbers;

			std::default_random_engine rngGen(7);
			if constexpr (std::is_floating_point<T>::value)
			{
				std::uniform_real_distribution<T> dist(-1322, 64323);
				for (size_t i = 0; i < size; i++)
				{
					numbers.push_back(dist(rngGen));
				}
			}
			else if constexpr (std::is_signed<T>::value)
			{
				std::uniform_int_distribution<T> dist(-1322, 64323);
				for (size_t i = 0; i < size; i++)
				{
					numbers.push_back(dist(rngGen));
				}
			}
			else if constexpr (std::is_unsigned<T>::value)
			{
				std::uniform_int_distribution<T> dist(0, 64323);
				for (size_t i = 0; i < size; i++)
				{
					numbers.push_back(dist(rngGen));
				}
			}
			else
			{
				static_assert("Failed to make a random generator for the specified type.");
			}

			return numbers;
		}

	public:
		template<typename T>
		void multiDimMatMul(std::vector<uint32_t> broadcastDims, uint32_t aHeight, uint32_t aWidth, uint32_t bHeight, uint32_t bWidth)
		{
			const uint32_t cWidth = bWidth;
			const uint32_t cHeight = aHeight;

			std::vector<uint32_t> aDims = broadcastDims;
			std::vector<uint32_t> bDims = broadcastDims;
			std::vector<uint32_t> cDims = broadcastDims;

			aDims.push_back(aHeight);
			aDims.push_back(aWidth);

			bDims.push_back(bHeight);
			bDims.push_back(bWidth);

			cDims.push_back(cHeight);
			cDims.push_back(cWidth);

			const uint32_t aMatrixSize = aHeight * aWidth;
			const uint32_t bMatrixSize = bHeight * bWidth;
			const uint32_t cMatrixSize = cHeight * cWidth;

			std::vector<T> aTensorValues;
			std::vector<T> bTensorValues;
			std::vector<T> cTensorValues;

			const uint32_t matrixCount = std::accumulate(broadcastDims.begin(), broadcastDims.end(), 1, std::multiplies<uint32_t>());
			for (size_t i = 0; i < matrixCount; i++)
			{
				std::vector<T> aMatrixValues = GetVectorWithRandomNumbers<T>(aMatrixSize);
				std::vector<T> bMatrixValues = GetVectorWithRandomNumbers<T>(bMatrixSize);

				dnnbasic::tensor<T> aMatrix({ aHeight, aWidth }, aMatrixValues);
				dnnbasic::tensor<T> bMatrix({ bHeight, bWidth }, bMatrixValues);

				std::vector<T> cMatrixValues = aMatrix.matMul(bMatrix)->getValuesOnCPU();

				aTensorValues.insert(aTensorValues.begin(), aMatrixValues.begin(), aMatrixValues.end());
				bTensorValues.insert(bTensorValues.begin(), bMatrixValues.begin(), bMatrixValues.end());
				cTensorValues.insert(cTensorValues.begin(), cMatrixValues.begin(), cMatrixValues.end());
			}

			dnnbasic::tensor<T> a(aDims, aTensorValues);
			dnnbasic::tensor<T> b(bDims, bTensorValues);

			dnnbasic::tensor<T> expected(cDims, cTensorValues);
			auto* actual = a.matMul(b);

			Assert::AreEqual(expected, *actual);
		}

#define GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(aH, aW, bH, bW, T) \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_1) { multiDimMatMul< ## T ## >({ 1 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_2) { multiDimMatMul< ## T ## >({ 2 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_3) { multiDimMatMul< ## T ## >({ 3 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_4) { multiDimMatMul< ## T ## >({ 4 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_5) { multiDimMatMul< ## T ## >({ 5 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_6) { multiDimMatMul< ## T ## >({ 6 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_7) { multiDimMatMul< ## T ## >({ 7 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_8) { multiDimMatMul< ## T ## >({ 8 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_9) { multiDimMatMul< ## T ## >({ 9 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_10) { multiDimMatMul< ## T ## >({ 10 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_34) { multiDimMatMul< ## T ## >({ 34 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_65) { multiDimMatMul< ## T ## >({ 65 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_12) { multiDimMatMul< ## T ## >({ 12 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_75) { multiDimMatMul< ## T ## >({ 75 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_753) { multiDimMatMul< ## T ## >({ 753 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_235) { multiDimMatMul< ## T ## >({ 235 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_1542) { multiDimMatMul< ## T ## >({ 1542 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_2521) { multiDimMatMul< ## T ## >({ 2521 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_2_5) { multiDimMatMul< ## T ## >({ 2, 5 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_45_53) { multiDimMatMul< ## T ## >({ 45, 53 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_124_9) { multiDimMatMul< ## T ## >({ 124, 9 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_4_43_25) { multiDimMatMul< ## T ## >({ 4, 43, 25 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_13_7_23) { multiDimMatMul< ## T ## >({ 13, 7, 32 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_74_12_3) { multiDimMatMul< ## T ## >({ 74, 12, 3 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); }

#define GEN_MULTI_TEST_SPECIFY_TYPE(T) \
	GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(1, 1, 1, 1, T) \
	GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(2, 1, 1, 2, T) \
	GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(3, 1, 1, 3, T) \
	GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(20, 1, 1, 20, T) \
	GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(21, 1, 1, 21, T) \
	GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(22, 1, 1, 22, T) \
	GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(23, 1, 1, 23, T) \
	GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(24, 1, 1, 24, T) \
	GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(25, 1, 1, 25, T) \
	GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(26, 1, 1, 26, T) \
	GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(27, 2, 1, 27, T)

		GEN_MULTI_TEST_SPECIFY_TYPE(float)
		//GEN_MULTI_TEST_SPECIFY_TYPE(double)
	};
}