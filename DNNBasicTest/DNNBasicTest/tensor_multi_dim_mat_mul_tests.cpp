#include <CppUnitTest.h>
#include <string>
#include <vector>
#include "tensor.h"
#include "test_tools.h"

namespace DNNBasicTest
{
	TEST_CLASS(tensorMultiDimMatMulTestsAutoGenerated)
	{
	public:
		template<typename T>
		void multiDimMatMul(std::vector<uint32_t> broadcastDims, uint32_t aHeight, uint32_t aWidth, uint32_t bHeight, uint32_t bWidth)
		{
			const uint32_t cWidth = bWidth;
			const uint32_t cHeight = aHeight;

			std::vector<uint32_t> aDims = broadcastDims;
			std::vector<uint32_t> bDims = broadcastDims;
			std::vector<uint32_t> cDims = broadcastDims;

			aDims.push_back(aHeight);
			aDims.push_back(aWidth);

			bDims.push_back(bHeight);
			bDims.push_back(bWidth);

			cDims.push_back(cHeight);
			cDims.push_back(cWidth);

			const uint32_t aMatrixSize = aHeight * aWidth;
			const uint32_t bMatrixSize = bHeight * bWidth;
			const uint32_t cMatrixSize = cHeight * cWidth;

			std::vector<T> aTensorValues;
			std::vector<T> bTensorValues;
			std::vector<T> cTensorValues;

			const uint32_t matrixCount = std::accumulate(broadcastDims.begin(), broadcastDims.end(), 1, std::multiplies<uint32_t>());
			for (size_t i = 0; i < matrixCount; i++)
			{
				std::vector<T> aMatrixValues = GetVectorWithRandomNumbers<T>(aMatrixSize);
				std::vector<T> bMatrixValues = GetVectorWithRandomNumbers<T>(bMatrixSize);

				dnnbasic::tensor<T> aMatrix({ aHeight, aWidth }, aMatrixValues);
				dnnbasic::tensor<T> bMatrix({ bHeight, bWidth }, bMatrixValues);

				std::vector<T> cMatrixValues = aMatrix.matMul(bMatrix)->getValuesOnCPU();

				aTensorValues.insert(aTensorValues.begin(), aMatrixValues.begin(), aMatrixValues.end());
				bTensorValues.insert(bTensorValues.begin(), bMatrixValues.begin(), bMatrixValues.end());
				cTensorValues.insert(cTensorValues.begin(), cMatrixValues.begin(), cMatrixValues.end());
			}

			dnnbasic::tensor<T> a(aDims, aTensorValues);
			dnnbasic::tensor<T> b(bDims, bTensorValues);

			dnnbasic::tensor<T> expected(cDims, cTensorValues);
			auto* actual = a.matMul(b);

			Assert::AreEqual(expected, *actual);
		}

#define GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(aH, aW, bH, bW, T) \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_1) { multiDimMatMul< ## T ## >({ 1 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_2) { multiDimMatMul< ## T ## >({ 2 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_3) { multiDimMatMul< ## T ## >({ 3 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_4) { multiDimMatMul< ## T ## >({ 4 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_5) { multiDimMatMul< ## T ## >({ 5 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_6) { multiDimMatMul< ## T ## >({ 6 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_7) { multiDimMatMul< ## T ## >({ 7 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_8) { multiDimMatMul< ## T ## >({ 8 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_9) { multiDimMatMul< ## T ## >({ 9 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_10) { multiDimMatMul< ## T ## >({ 10 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_34) { multiDimMatMul< ## T ## >({ 34 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_65) { multiDimMatMul< ## T ## >({ 65 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_12) { multiDimMatMul< ## T ## >({ 12 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_75) { multiDimMatMul< ## T ## >({ 75 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_753) { multiDimMatMul< ## T ## >({ 753 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_235) { multiDimMatMul< ## T ## >({ 235 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_1542) { multiDimMatMul< ## T ## >({ 1542 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_2521) { multiDimMatMul< ## T ## >({ 2521 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_2_5) { multiDimMatMul< ## T ## >({ 2, 5 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_45_53) { multiDimMatMul< ## T ## >({ 45, 53 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_124_9) { multiDimMatMul< ## T ## >({ 124, 9 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_4_43_25) { multiDimMatMul< ## T ## >({ 4, 43, 25 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_13_7_23) { multiDimMatMul< ## T ## >({ 13, 7, 32 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); } \
	TEST_METHOD(T ## multiDimMatMul_Ma ## aH ## _ ## aW ## _Mb_ ## bH ## _ ## bW ## _BDims_74_12_3) { multiDimMatMul< ## T ## >({ 74, 12, 3 }, ## aH ##, ## aW ##, ## bH ##, ## bW ##); }

#define GEN_MULTI_TEST_SPECIFY_TYPE(T) \
	GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(1, 1, 1, 1, T) \
	GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(2, 1, 1, 2, T) \
	GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(3, 1, 1, 3, T) \
	GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(20, 1, 1, 20, T) \
	GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(21, 1, 1, 21, T) \
	GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(22, 1, 1, 22, T) \
	GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(23, 1, 1, 23, T) \
	GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(24, 1, 1, 24, T) \
	GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(25, 1, 1, 25, T) \
	GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(26, 1, 1, 26, T) \
	GEN_MULTI_TEST_SPECIFY_MAT_DIMS_AND_TYPE(27, 2, 1, 27, T)

		GEN_MULTI_TEST_SPECIFY_TYPE(float)
		//GEN_MULTI_TEST_SPECIFY_TYPE(double)
	};

	TEST_CLASS(tensorMultiDimMatMulTests)
	{
	public:
		template<typename T>
		void matrixMutiDimMatrix1x3x2MulMatrix1x2x3()
		{
			dnnbasic::tensor<T> a({ 1, 3, 2 },
				{
					5,7,
					4,8,
					6,1,
				});
			dnnbasic::tensor<T> b({ 1, 2, 3 },
				{
					7,5,4,
					7,9,6,
				});

			dnnbasic::tensor<T> expected({ 1, 3, 3 },
				{
					84,88,62,
					84,92,64,
					49,39,30,
				});
			auto* actual = a.matMul(b);

			Assert::AreEqual(expected, *actual);
		}
		TEST_ALL_OP_TYPES(matrixMutiDimMatrix1x3x2MulMatrix1x2x3)

		template<typename T>
		void matrixMutiDimMatrix2x2x2MulMatrix2x2x2()
		{
			dnnbasic::tensor<T> a({ 2, 2, 2 },
				{
					5,7,
					4,8,

					5,7,
					4,8,
				});
			dnnbasic::tensor<T> b({ 2, 2, 2 },
				{
					7,5,
					7,9,

					7,5,
					7,9
				});

			dnnbasic::tensor<T> expected({ 2, 2, 2 },
				{
					84,88,
					84,92,

					84,88,
					84,92
				});
			auto* actual = a.matMul(b);

			Assert::AreEqual(expected, *actual);
		}
		TEST_ALL_OP_TYPES(matrixMutiDimMatrix2x2x2MulMatrix2x2x2)

		template<typename T>
		void matrixMutiDimMatrix3x2MulMatrix2x3()
		{
			dnnbasic::tensor<T> a({ 2, 3, 2 },
				{
					5,7,
					4,8,
					6,1,

					5,7,
					4,8,
					6,1
				});
			dnnbasic::tensor<T> b({ 2, 2, 3 },
				{
					7,5,4,
					7,9,6,

					7,5,4,
					7,9,6
				});

			dnnbasic::tensor<T> expected({ 2, 3, 3 },
				{
					84,88,62,
					84,92,64,
					49,39,30,

					84,88,62,
					84,92,64,
					49,39,30
				});
			auto* actual = a.matMul(b);

			Assert::AreEqual(expected, *actual);
		}
		TEST_ALL_OP_TYPES(matrixMutiDimMatrix3x2MulMatrix2x3)

			template<typename T>
		void matrixMultiDimMatrixMul4Dim()
		{
			dnnbasic::tensor<T> a({ 2, 2, 3, 2 },
				{
					0,1,
					2,3,
					4,5,

					6,7,
					8,9,
					10,11,


					12,13,
					14,15,
					16,17,

					18,19,
					20,21,
					22,23
				});
			dnnbasic::tensor<T> b({ 2, 2, 2, 3 },
				{
					0,1,2,
					3,4,5,

					6,7,8,
					9,10,11,


					12,13,14,
					15,16,17,

					18,19,20,
					21,22,23
				});

			dnnbasic::tensor<T> expected({ 2, 2, 3, 3 },
				{
					3,4,5,
					9,14,19,
					15,24,33,

					99,112,125,
					129,146,163,
					159,180,201,

					339,364,389,
					393,422,451,
					447,480,513,

					723,760,797,
					801,842,883,
					879,924,969

				});
			auto* actual = a.matMul(b);

			Assert::AreEqual(expected, *actual);
		}
		TEST_ALL_OP_TYPES_LEAST_8_BITS(matrixMultiDimMatrixMul4Dim)

		template<typename T>
		void matrixMutiDimVectorMulMatrix()
		{
			dnnbasic::tensor<T> a({ 2, 1, 3 },
				{
					69, 108, 134,

					72, 109, 147
				});
			dnnbasic::tensor<T> b({ 2, 3, 3 },
				{

					18,10,6,
					8,9,16,
					13,5,10,

					6,6,15,
					3,8,5,
					3,15,7
				});

			dnnbasic::tensor<T> expected({ 2, 1, 3 },
				{
					3848, 2332, 3482,

					1200, 3509, 2654
				});
			auto* actual = a.matMul(b);

			Assert::AreEqual(expected, *actual);
		}
		TEST_ALL_OP_TYPES_LEAST_8_BITS(matrixMutiDimVectorMulMatrix)
	};
}