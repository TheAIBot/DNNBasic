#include <CppUnitTest.h>
#include <string>
#include <vector>
#include <array>
#include <functional>
#include <limits>
#include "tensor.h"
#include "test_tools.h"

namespace DNNBasicTest
{
	template<typename From, typename To>
	std::vector<To> castData(std::vector<From>& from)
	{
		std::vector<To> to;
		for (size_t i = 0; i < from.size(); i++)
		{
			to.push_back((To)from[i]);
		}

		return to;
	}

	TEST_CLASS(tensorCastSpecialCasesTestsAutoGenerated)
	{
		template<typename From, typename To>
		void tensorCastSpecialCases()
		{
			std::vector<From> cases =
			{
				(From)(((From)std::numeric_limits<To>::min()) * 2),
				(From)(((From)std::numeric_limits<To>::min())),
				(From)(((From)std::numeric_limits<To>::max())),
				(From)(((From)std::numeric_limits<To>::max()) * 2),
			};

			dnnbasic::tensor<From> from({ (uint32_t)cases.size() }, cases);
			dnnbasic::tensor<To> expected({ (uint32_t)cases.size() }, castData<From, To>(cases));

			assertTensorOp<To>(expected, [&]() {return from.cast<To>(); });
		}

	public:

#define TEST_CAST_SPECIAL_FROM_TO(fromTyp, toTyp) \
	TEST_METHOD(castFrom_ ## fromTyp ## _to_ ## toTyp) { tensorCastSpecialCases< ## fromTyp ## , ## toTyp ## >(); }

#define TEST_CAST_SPECIAL_FROM(fromTyp) \
	TEST_CAST_SPECIAL_FROM_TO(fromTyp, uint8_t) \
	TEST_CAST_SPECIAL_FROM_TO(fromTyp, uint16_t) \
	TEST_CAST_SPECIAL_FROM_TO(fromTyp, uint32_t) \
	TEST_CAST_SPECIAL_FROM_TO(fromTyp, uint64_t) \
	TEST_CAST_SPECIAL_FROM_TO(fromTyp, int8_t) \
	TEST_CAST_SPECIAL_FROM_TO(fromTyp, int16_t) \
	TEST_CAST_SPECIAL_FROM_TO(fromTyp, int32_t) \
	TEST_CAST_SPECIAL_FROM_TO(fromTyp, int64_t) \
	TEST_CAST_SPECIAL_FROM_TO(fromTyp, float) \
	TEST_CAST_SPECIAL_FROM_TO(fromTyp, double)


		TEST_CAST_SPECIAL_FROM(uint8_t)
		TEST_CAST_SPECIAL_FROM(uint16_t)
		TEST_CAST_SPECIAL_FROM(uint32_t)
		TEST_CAST_SPECIAL_FROM(uint64_t)
		TEST_CAST_SPECIAL_FROM(int8_t)
		TEST_CAST_SPECIAL_FROM(int16_t)
		TEST_CAST_SPECIAL_FROM(int32_t)
		TEST_CAST_SPECIAL_FROM(int64_t)
		TEST_CAST_SPECIAL_FROM(float)
		TEST_CAST_SPECIAL_FROM(double)
	};

	TEST_CLASS(tensorCastRandomCasesTestsAutoGenerated)
	{
	public:

		template<typename From, typename To>
		void tensorCast(uint32_t length)
		{
			auto values = GetVectorWithRandomNumbers<From>(length);

			dnnbasic::tensor<From> from({ length }, values);
			dnnbasic::tensor<To> expected({ length }, castData<From, To>(values));

			assertTensorOp<To>(expected, [&]() {return from.cast<To>(); });
		}

#define TEST_CAST_FROM_TO_WITH_LENGTH(fromTyp, toTyp, dataLength) \
	TEST_METHOD(castFrom_ ## fromTyp ## _to_ ## toTyp ## _length_ ## dataLength) { tensorCast< ## fromTyp ## , ## toTyp ## >( ## dataLength ## ); }

#define TEST_CAST_FROM_WITH_LENGTH(fromTyp, length) \
	TEST_CAST_FROM_TO_WITH_LENGTH(fromTyp, uint8_t, length) \
	TEST_CAST_FROM_TO_WITH_LENGTH(fromTyp, uint16_t, length) \
	TEST_CAST_FROM_TO_WITH_LENGTH(fromTyp, uint32_t, length) \
	TEST_CAST_FROM_TO_WITH_LENGTH(fromTyp, uint64_t, length) \
	TEST_CAST_FROM_TO_WITH_LENGTH(fromTyp, int8_t, length) \
	TEST_CAST_FROM_TO_WITH_LENGTH(fromTyp, int16_t, length) \
	TEST_CAST_FROM_TO_WITH_LENGTH(fromTyp, int32_t, length) \
	TEST_CAST_FROM_TO_WITH_LENGTH(fromTyp, int64_t, length) \
	TEST_CAST_FROM_TO_WITH_LENGTH(fromTyp, float, length) \
	TEST_CAST_FROM_TO_WITH_LENGTH(fromTyp, double, length)

#define TEST_CAST_WITH_LENGTH(length) \
	TEST_CAST_FROM_WITH_LENGTH(uint8_t, length) \
	TEST_CAST_FROM_WITH_LENGTH(uint16_t, length) \
	TEST_CAST_FROM_WITH_LENGTH(uint32_t, length) \
	TEST_CAST_FROM_WITH_LENGTH(uint64_t, length) \
	TEST_CAST_FROM_WITH_LENGTH(int8_t, length) \
	TEST_CAST_FROM_WITH_LENGTH(int16_t, length) \
	TEST_CAST_FROM_WITH_LENGTH(int32_t, length) \
	TEST_CAST_FROM_WITH_LENGTH(int64_t, length) \
	TEST_CAST_FROM_WITH_LENGTH(float, length) \
	TEST_CAST_FROM_WITH_LENGTH(double, length)

		TEST_CAST_WITH_LENGTH(1)
		TEST_CAST_WITH_LENGTH(743)
		TEST_CAST_WITH_LENGTH(9823)
	};
}